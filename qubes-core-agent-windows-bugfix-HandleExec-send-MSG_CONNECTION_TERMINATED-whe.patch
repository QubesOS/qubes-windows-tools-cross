From a6775ad8239f1c36e1def146b5118ff29dabab98 Mon Sep 17 00:00:00 2001
From: Mikhail Lukashov <mlukashov@tabit.pro>
Date: Fri, 14 Jan 2022 18:14:51 +0300
Subject: [PATCH] bugfix: HandleExec: send MSG_CONNECTION_TERMINATED when
 process is terminated

---
 src/qrexec-agent/qrexec-agent.c | 107 +++++++++++++++++++++++++++++---
 1 file changed, 99 insertions(+), 8 deletions(-)

diff --git a/src/qrexec-agent/qrexec-agent.c b/src/qrexec-agent/qrexec-agent.c
index 0756df9..49a232b 100644
--- a/src/qrexec-agent/qrexec-agent.c
+++ b/src/qrexec-agent/qrexec-agent.c
@@ -70,6 +70,95 @@ void DumpRequestList(void)
 }
 #endif
 
+struct _connection_info
+{
+    HANDLE handle;
+    int connect_domain;
+    int connect_port;
+};
+
+#define MAX_FDS 256
+static struct _connection_info connection_info[MAX_FDS];
+
+static void register_vchan_connection(HANDLE handle, int domain, int port)
+{
+    for (int i = 0; i < MAX_FDS; i++)
+    {
+        if (connection_info[i].handle == NULL)
+        {
+            EnterCriticalSection(&g_DaemonCriticalSection);
+            connection_info[i].handle = handle;
+            connection_info[i].connect_domain = domain;
+            connection_info[i].connect_port = port;
+            LeaveCriticalSection(&g_DaemonCriticalSection);
+            return;
+        }
+    }
+    LogError("No free slot for child %d (connection to %d:%d)", (int)handle, domain, port);
+}
+
+static void release_connection(int id)
+{
+    struct msg_header hdr;
+    struct exec_params params;
+
+    HANDLE handle = connection_info[id].handle;
+    hdr.type = MSG_CONNECTION_TERMINATED;
+    hdr.len = sizeof(struct exec_params);
+    params.connect_domain = connection_info[id].connect_domain;
+    params.connect_port = connection_info[id].connect_port;
+    if (libvchan_send(g_DaemonVchan, &hdr, sizeof(hdr)) != sizeof(hdr))
+    {
+        LogError("send (MSG_CONNECTION_TERMINATED hdr)");
+        return;
+    }
+    if (libvchan_send(g_DaemonVchan, &params, sizeof(params)) != sizeof(params))
+    {
+        LogError("send (MSG_CONNECTION_TERMINATED data)");
+        return;
+    }
+    CloseHandle(handle);
+    connection_info[id].handle = NULL;
+    return;
+}
+
+static BOOL handle_is_running(HANDLE hProcess)
+{
+    if (hProcess == INVALID_HANDLE_VALUE)
+    {
+        return FALSE;
+    }
+    DWORD dwRetval = WaitForSingleObject(hProcess, 0);
+
+    switch(dwRetval)
+    {
+    case WAIT_OBJECT_0:
+        return FALSE;
+    case WAIT_TIMEOUT:
+        return TRUE;
+    default:
+        return FALSE;
+    }
+    return FALSE;
+}
+
+static void check_connections()
+{
+    for (int i = 0; i < MAX_FDS; i++)
+    {
+        HANDLE handle = connection_info[i].handle;
+        if (handle != NULL)
+        {
+            if (!handle_is_running(handle))
+            {
+                EnterCriticalSection(&g_DaemonCriticalSection);
+                release_connection(i);
+                LeaveCriticalSection(&g_DaemonCriticalSection);
+            }
+        }
+    }
+}
+
 /**
  * @brief Wait for qubesdb service to start.
  * @return TRUE if a connection could be opened, FALSE if timed out (60 seconds).
@@ -660,8 +749,9 @@ static DWORD StartChild(int domain, int port, PWSTR userName, PWSTR commandLine,
     // wrapper will run as current user (SYSTEM, we're a service)
     status = CreateNormalProcessAsCurrentUser(command, &wrapper);
     if (status == ERROR_SUCCESS)
-        CloseHandle(wrapper);
-
+    {
+        register_vchan_connection(wrapper, domain, port);
+    }
     free(command);
     return status;
 }
@@ -955,18 +1045,18 @@ static DWORD HandleDaemonMessage(void)
     case MSG_HELLO:
         return HandleDaemonHello(&header);
 
-    case MSG_SERVICE_CONNECT:
-        return HandleServiceConnect(&header);
-
-    case MSG_SERVICE_REFUSED:
-        return HandleServiceRefused(&header);
-
     case MSG_EXEC_CMDLINE:
         return HandleExec(&header, TRUE);
 
     case MSG_JUST_EXEC:
         return HandleExec(&header, FALSE);
 
+    case MSG_SERVICE_CONNECT:
+        return HandleServiceConnect(&header);
+
+    case MSG_SERVICE_REFUSED:
+        return HandleServiceRefused(&header);
+
     default:
         LogWarning("unknown message type: 0x%x", header.type);
         return ERROR_INVALID_PARAMETER;
@@ -1084,6 +1174,7 @@ static DWORD WatchForEvents(HANDLE stopEvent)
                 win_perror2(status, "HandleDaemonMessage");
                 goto out;
             }
+            check_connections();
         }
 
     out:
-- 
2.35.0.windows.1

